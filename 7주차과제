함수가 왜 필요한가?
정의된 함수를 그대로 쓰기위해서는 이름이 중요하다. 또한 의미에 맞는 함수를 사용하자.
함수를 정의할 때 반드시 반환되는 리턴 값이 있어야 한다.
함수를 선언하지 않고 함수를 사용하면 오류가 뜨기 때문에 선언해야한다.

#include <stdio.h>
int sumtwo(int a, int b); // 선언을 먼저 해줘야 한다.
int main()
{
	int x = 10, y = 5;
	int value;
	value = sumtwo(x, y); // 선언한 함수를 호출한다.
	printf("두수의 합 : %d\n", value);
	return 0;
}
int sumtwo(int a, int b)
{
	int result;
	result = a + b;
	return result;
}

#include <stdio.h>
float Average(float x, float y); // 함수 선언
int main(void){
float num1, num2, result;
printf("실수 2개를 입력하세요 : ");
scanf_s("%f %f", &num1, &num2); // 함수 호출
result = Average(num1, num2);
printf("두 실수의 평균 : %f\n", result);
return 0;
}
float Average(float x, float y) // 함수 정의
{
	float z;
	z = (x + y) / 2;
	return z;
}

#include <stdio.h>
int Integral(int start, int end); // 함수 선언
int main(void)
{
	int result = 0, i;

	printf("함수를 사용하지 않고 합을 구함\n");
	for (i = 1; i <= 10; i++)
		result += i;

	printf("1부터 10까지의 합은 %d다. \n, result");

	result = 0; // result 값을 0으로 다시 초기화한다.

	for (i = 7; i <= 17; i++)
		result += i;

	printf("7부터 17까지의 합은 %d다.\n", result);
	printf("*********************************\n");
	printf("함수를 사용하여 합을 구함\n");
	printf("1부터 10까지 합은 %d다.\n", Integral(1, 10));
	printf("7부터 17까지 합은 %d다.\n", Integral(7, 17));

	return 0; 
}

int Integral(int start, int end) // 함수 정의
{
	int sum = 0, i;
	for (i = start; i <= end; i++)
		sum += i;
	return sum;
}
#endif

#if 01
#include <stdio.h>

void upper_case(char ch);
int main(void)
{
	char ch1, ch2;
	while ((ch1 = getchar()) != EOF) {
		upper_case(ch1);
	}
	return 0;

}

void upper_case(char ch) // return 값이 없는 이유?
다른 예제들은 거의 return 값을 이용하여 반환되는 값을 사용했지만
void를 사용했기 때문에 return 값을 사용하지 않는다. 하나를 입력받아서 하나를 출력하는 값이 있기 때문에 return 값이 필요가 없다.
{
	char res;
	if (ch >= 'a' && ch <= 'z')
		res = ch - 32;
	else
		res = ch;
	putchar(res);
}
#endif

팩토리얼 함수는 함수에서 자기 자신을 계속 호출하기 때문에 종료 조건을 결정해줘야지만 무한반복하지 않는다.
int factorial(int n)
{
if(n <= 1) return 1; // 종료 조건 (종료조건이 없으면 무한반복된다)
else return n * factorial(n-1);
⋮
}

10 팩토리얼 구하기 // 이럴 때 재귀함수가 좋은 이유가 무엇일까?
데이터 N개로 이뤄진 문제가 N-1개 문제를 해결하면 간단하게 해결될 때 사용
int factorial(int n);
int main(void)
{
	int fact_num;
	fact_num = factorial(10);

	printf("10 팩토리얼 : %d\n", fact_num);

	return 0;
}

int factorial(int n)
{
	if (n <= 1)
		return(1);
	else
		return(n * factorial(n - 1));
}
