함수를 사용하는 이유가 뭐라고 생각해?
함수를 사용하는 이유는 여러가지가 있다고 생각해.
첫 번째로는 소스 코드의 중복성을 없애줘. 
두 번째로는 소스의 가독성이 좋아져. 각 함수들은 특징적인 한 가지 기능만을 맡기때문이야.

함수는 내가 만들 수도 있어?
당연하지.
우리가 보통 쓰는 함수는 라이브러리 함수라고 컴파일러에서 제공하는 함수이고
우리가 직접 정의하는 함수는 사용자 정의 함수라고 해.

여기서 중요한 점이 있어 정의된 함수를 그대로 쓰기위해서는 이름이 중요해,  의미에 맞는 함수를 사용하자.
함수를 정의할 때 반드시 반환되는 리턴 값이 있어야 해.
함수를 선언하지 않고 함수를 사용하면 오류가 뜨기 때문에 선언해야해.

함수를 선언하고 호출해보자!

#include <stdio.h>
int sumtwo(int a, int b); // 선언을 먼저 해줘야 한다.
int main()
{
	int x = 10, y = 5;
	int value;
	value = sumtwo(x, y); // 선언한 함수를 호출한다.
	printf("두수의 합 : %d\n", value);
	return 0;
}
int sumtwo(int a, int b)
{
	int result;
	result = a + b;
	return result;
}

함수를 선언하고 호출하고 정의해보자!
#include <stdio.h>

float Average(float x, float y); // 함수 선언

int main(void)
{
  float num1, num2, result;
  printf("실수 2개를 입력하세요 : ");
  scanf_s("%f %f", &num1, &num2); // 함수 호출

  result = Average(num1, num2);
  printf("두 실수의 평균 : %f\n", result);
  return 0;
}

float Average(float x, float y) // 함수 정의
{
	float z;
	z = (x + y) / 2;
	return z;
}

엇 우리가 하던 선언과는 달리 이 예문은 함수를 선언하지 않고 바로 정의했는데 문제있는 거 아니야?
함수를 선언하라고 우린 배웠지만 예외일때도 있어.
함수의 선언은 main()함수에 어떤 사용자 정의 함수가 있는지 미리 알려주는 역할을 해.
그러나 함수의 선언이 항상 필요한 것은 아니야. main()보다 먼저 함수를 정의한다면 선언하지 않아도 돼!
선언-호출-정의 순서인데 정의 - 호출 순서로 가도 된다는 거구나!
#include <stdio.h>

int SumTwo(int a, int b) // main()보다 먼저 함수가 정의되었음으로 선언이 필요없다
{
   int result;
   result = a + b;
   return result;
}

int main(void)
{
   int x = 10, y = 5;
   int value;

   value = SumTwo(x, y); // 함수 호출

   printf("두 수의 합 : %d\n", value);

   return 0;
}

#include <stdio.h>

void upper_case(char ch);
int main(void)
{
	char ch1, ch2;
	while ((ch1 = getchar()) != EOF) {
		upper_case(ch1);
	}
	return 0;

}

void upper_case(char ch) // return 값이 없는 이유?
다른 예제들은 거의 return 값을 이용하여 반환되는 값을 사용했지만
void를 사용했기 때문에 return 값을 사용하지 않는다. 하나를 입력받아서 하나를 출력하는 값이 있기 때문에 return 값이 필요가 없다.
{
	char res;
	if (ch >= 'a' && ch <= 'z')
		res = ch - 32;
	else
		res = ch;
	putchar(res);
}

그러고 보니 우리가 만든 사용자 정의 함수는 어디에 포함 돼?
함수 원형들이 많이 정의되는 곳은 stdio.h라는 헤더 파일 사용하지만, 
사용자가 만든 함수의 선언은 일반적으로 사용자가 만든 헤더파일에 포함돼!
헤더파일을 만들때에는 중요한 점이 있어!
1. 헤더 파일에는 함수의 원형을 선언해줘야해.
2.소스파일에는 함수를 정의해줘야해.
3. 가장 중요한 부분이야! 헤더 파일이름은 반드시 만드려는 소스파일 이름과 같아야 해! (확장자만 달라)
4. 사용자가 만든 헤더 파일을 포함할 때는 <>가 아닌 ""를 붙여서 포함시키면 돼! (ex: #include "plus.h") >> 큰 따옴표는 현재 디렉토리에서 파일을 찾으라는 뜻이다

굳이 헤더 파일에 원형을 선언하고, 소스 파일에 함수를 정의 하면서 다중 소스 파일을 만드는 이유가 뭘까?
엄청난 코드를 정리할 수 있고, 헤더 파일로 따로 선언하며 저장함으로서 이식성 좋아져!
즉, 한 번 개발하면 다시 쉽게 언제든지 쓸 수 있다는 큰 장점이 있지!

팩토리얼 함수는 함수에서 자기 자신을 계속 호출하기 때문에 종료 조건을 결정해줘야지만 무한반복하지 않는다.
int factorial(int n)
{
if(n <= 1) return 1; // 종료 조건 (종료조건이 없으면 무한반복된다)
else return n * factorial(n-1);
⋮
}

10 팩토리얼 구하기 // 이럴 때 재귀함수가 좋은 이유가 무엇일까?
데이터 N개로 이뤄진 문제가 N-1개 문제를 해결하면 간단하게 해결될 때 사용
int factorial(int n);
int main(void)
{
	int fact_num;
	fact_num = factorial(10);

	printf("10 팩토리얼 : %d\n", fact_num);

	return 0;
}

int factorial(int n)
{
	if (n <= 1)
		return(1);
	else
		return(n * factorial(n - 1));
}


265p 11번 문제
#include "myheader.h"  // 헤더

int main(void) {
   //최댓값 최소값
   int b[] = { 20,34,12,24,54,91,9,40,81,10 };
   int size = sizeof(b) / sizeof(int);
   
   int max_result = max_Array(b, size); // 최댓값 함수 호출
   int min_result = min_Array(b, size); // 최소값 함수 호출
   printf("최댓값 : %d , 최소값 : %d", max_result, min_result);
   return 0;
}


// 함수 부분

// 최댓값
int max_Array(int Array[], int size) {
   int max = -1000;

   for (int i = 0; i < size; i++) {
      if (Array[i] >= max) {
         max = Array[i];
      }
   }
   return max;
}
//최소값
int min_Array(int Array[], int size) {
   int min = 1000;

   for (int i = 0; i < size; i++) {
      if (Array[i] <= min) {
         min = Array[i];
      }
   }
   return min;
}
